/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/animations/clipUp.js":
/*!*************************************!*\
  !*** ./src/js/animations/clipUp.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst clipUp = (arr, delay = 1, additionalAnimations = []) => {\n  const tl = gsap.timeline();\n  tl.fromTo(\n    arr,\n    {\n      clipPath: \"polygon(0% 0%, 110% 0%, 110% 0%, 0% 0%)\",\n      y: 100,\n    },\n    {\n      clipPath: \"polygon(0% 0%, 110% 0%, 110% 120%, 0% 120%)\",\n      y: 0,\n      ease: \"power4.out\",\n      stagger: 0.8,\n      duration: 3,\n      delay: delay,\n    }\n  );\n\n  additionalAnimations.forEach((animation) => {\n    tl.to(animation.target, animation.props, animation.position || \"<\");\n  });\n\n  return tl;\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clipUp);\n\n\n//# sourceURL=webpack://terranova/./src/js/animations/clipUp.js?");

/***/ }),

/***/ "./src/js/logic/draggableCarousel.js":
/*!*******************************************!*\
  !*** ./src/js/logic/draggableCarousel.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   draggableCarousel: () => (/* binding */ draggableCarousel)\n/* harmony export */ });\n/**\n * Initialize a draggable carousel with the provided elements and settings.\n *\n * @param {Element} carouselContainer - The element that contains the carousel's track, which contains all the carousel's slides.\n * @param {Element} carouselTrack - The element that contains all the carousel's slides.\n * @param {string} slideSelector - A CSS selector for each carousel slide, e.g., '.carousel__slide'.\n * @param {Element} nextButton - (Optional) The element that triggers the next carousel slide.\n * @param {Element} previousButton - (Optional) The element that triggers the previous carousel slide.\n * @param {Element} indicator - (Optional) An absolute positioned element representing the carousel's progress indicator.\n */\n\n// FIX NEXT, PREVIOUS BUTTONS AND INDICATOR!\n\nconst draggableCarousel = (\n  carouselContainer,\n  carouselTrack,\n  slideSelector,\n  nextButton = undefined,\n  previousButton = undefined,\n  indicator = undefined\n) => {\n  // Entrance\n  ScrollTrigger.create({\n    ease: \"power3.out\",\n  });\n\n  const draggableCarouselTimeline = gsap.timeline({\n    scrollTrigger: {\n      trigger: carouselContainer,\n      start: \"20% 100%\",\n      toggleActions: \"play reverse restart reverse\",\n    },\n  });\n\n  draggableCarouselTimeline.fromTo(\n    slideSelector,\n    {\n      opacity: 0,\n      x: \"20%\",\n    },\n    {\n      opacity: 1,\n      x: 0,\n      ease: \"power3.out\",\n      duration: 3,\n      stagger: { amount: 0.2, from: \"random\" },\n    }\n  );\n\n  // Initial UI State\n  carouselContainer.style.overflow = \"hidden\";\n  // Set the initial values for data attributes\n  carouselTrack.setAttribute(\"data-mouse-down-at\", \"0\");\n  carouselTrack.setAttribute(\"data-prev-percentage\", \"0\");\n\n  // Define a variable to track whether the mouse button is down\n  let isMouseDown = false;\n\n  if (previousButton) previousButton.style.visibility = \"hidden\";\n\n  // Calculate Carousel Track Width\n  const draggableCarouselWidth = carouselTrack.scrollWidth;\n\n  // Get All Slides\n  const carouselSlides = carouselContainer.querySelectorAll(slideSelector);\n\n  // Calculate All Slides Width\n  let totalSlideWidth = 0;\n  carouselSlides.forEach((slide) => {\n    // console.log(slide.offsetWidth);\n    totalSlideWidth += slide.offsetWidth;\n    // console.log(slide);\n  });\n\n  // Calculate Each Slide Width\n  const slidesNumber = carouselSlides.length;\n  const slideWidth = draggableCarouselWidth / slidesNumber;\n\n  // CalculateOffsets\n  const offset = window.innerWidth - slideWidth;\n  const offsetTouch = window.screen.width - slideWidth;\n\n  // Carousel Timeline\n  const carouselTimeline = gsap.timeline({ paused: true });\n\n  carouselTimeline.fromTo(\n    carouselTrack,\n    {\n      x: \"0%\",\n    },\n    {\n      x: -totalSlideWidth + offset,\n      ease: \"none\",\n    }\n  );\n\n  // Mouse/ Touch Down\n  const click = (e) => {\n    console.log(carouselSlides.length);\n    isMouseDown = true;\n\n    carouselTrack.dataset.mouseDownAt = e.clientX;\n    carouselTimeline.pause();\n\n    // Scale down on click\n    gsap.to(carouselSlides, {\n      scale: 0.95,\n    });\n  };\n\n  const touch = (e) => {\n    carouselTrack.dataset.mouseDownAt = e.clientX;\n    carouselTimeline.pause();\n\n    // Scale down on click\n    gsap.to(carouselSlides, {\n      scale: 0.95,\n    });\n  };\n\n  carouselTrack.addEventListener(\"mousedown\", (e) => {\n    click(e);\n  });\n  carouselTrack.addEventListener(\"touchstart\", (e) => {\n    touch(e.touches[0]);\n  });\n\n  // Mouse/ Touch Move\n  const moveSwipe = (e) => {\n    if (carouselTrack.dataset.mouseDownAt === \"0\") return;\n    const mouseDelta =\n      parseFloat(carouselTrack.dataset.mouseDownAt) - e.clientX;\n    const maxDelta = window.innerWidth * 2;\n\n    const percentage = (mouseDelta / maxDelta) * -100;\n    const nextPercentageUnconstrained =\n      parseFloat(carouselTrack.dataset.prevPercentage) + percentage;\n    const nextPercentage = Math.max(\n      Math.min(nextPercentageUnconstrained, 0),\n      -100\n    );\n\n    carouselTrack.dataset.percentage = nextPercentage;\n\n    // Use gsap.to to animate the timeline's progress\n    gsap.to(carouselTimeline, {\n      progress: Math.abs(nextPercentage / 100),\n    });\n  };\n\n  carouselTrack.addEventListener(\"mousemove\", (e) => {\n    moveSwipe(e);\n  });\n\n  carouselTrack.addEventListener(\"touchmove\", (e) => {\n    moveSwipe(e.touches[0]);\n  });\n\n  // Mouse/ Touch Leave\n  const leave = (e) => {\n    isMouseDown = false;\n    carouselTrack.dataset.mouseDownAt = \"0\";\n    carouselTrack.dataset.prevPercentage = carouselTrack.dataset.percentage;\n    carouselTimeline.pause();\n    gsap.to(carouselSlides, { scale: 1 });\n  };\n  carouselTrack.addEventListener(\"mouseup\", (e) => leave(e));\n  carouselTrack.addEventListener(\"touchend\", (e) => leave(e.touches[0]));\n\n  // Touch Move\n  carouselTrack.addEventListener(\"touchmove\", (e) => {\n    if (!isMouseDown) return;\n    e.preventDefault();\n    const x = e.touches[0].pageX - carouselTrack.offsetLeft;\n\n    const walk = x - mouseStartingPosition;\n    const newTranslateAmount = translateAmount + walk;\n\n    // Calculate the percentage of translation relative to the maximum allowed translation\n    const minTranslateAmount = 0;\n    const maxTranslateAmount = -totalSlideWidth + offsetTouch;\n    const percentage = (newTranslateAmount / maxTranslateAmount) * 100;\n\n    // Update the indicator position\n    if (indicator) {\n      if (percentage <= 100 && percentage >= 0)\n        indicator.style.left = `${percentage}%`;\n    }\n\n    if (newTranslateAmount > minTranslateAmount) {\n      gsap.to(carouselTrack, { x: `${minTranslateAmount}px` });\n    } else if (newTranslateAmount < maxTranslateAmount) {\n      gsap.to(carouselTrack, { x: `${maxTranslateAmount}px` });\n    } else {\n      gsap.to(carouselTrack, { x: `${newTranslateAmount}px` });\n    }\n  });\n\n  // Leave mouse when dragging outside the screen\n  window.addEventListener(\"mousemove\", (e) => {\n    if (isMouseDown) {\n      moveSwipe(e);\n\n      // Check if the cursor has moved outside a certain boundary (e.g., the window width)\n      if (e.clientX > window.innerWidth) {\n        leave();\n      }\n    }\n  });\n\n  // Firefox Bug Fix\n  const disableDrag = (e) => {\n    e.preventDefault();\n  };\n  carouselTrack.addEventListener(\"dragstart\", disableDrag);\n\n  // Next/ Previous Button Navigation\n  let currentSlide = 0;\n\n  const navigateWithArrow = (direction) => {\n    if (direction === \"next\") {\n      currentSlide++;\n      if (currentSlide >= slidesNumber) {\n        currentSlide = 0;\n        nextButton.style.visibility = \"hidden\";\n      }\n    } else if (direction === \"previous\") {\n      currentSlide--;\n      if (currentSlide < 0) {\n        currentSlide = slidesNumber - 1;\n        previousButton.style.visibility = \"hidden\";\n      }\n    }\n\n    const translateX = `-${slideWidth * currentSlide}px`;\n    gsap.to(carouselTrack, { x: translateX, duration: 0.3 });\n\n    // Calculate the percentage of translation relative to the maximum allowed translation\n    const maxTranslateAmount = -totalSlideWidth + window.innerWidth;\n    const percentage =\n      -((slideWidth * currentSlide) / maxTranslateAmount) * 100;\n\n    // Update the indicator position\n    if (!indicator) return;\n    if (percentage <= 100 && percentage >= 0)\n      gsap.to(indicator, { left: `${percentage}%` });\n\n    nextButton.style.visibility = \"visible\";\n    previousButton.style.visibility = \"visible\";\n  };\n\n  // Next Button\n  if (nextButton) {\n    nextButton.addEventListener(\"click\", () => navigateWithArrow(\"next\"));\n  }\n\n  // Previous Button\n  if (previousButton) {\n    previousButton.addEventListener(\"click\", () =>\n      navigateWithArrow(\"previous\")\n    );\n  }\n};\n\n\n\n\n//# sourceURL=webpack://terranova/./src/js/logic/draggableCarousel.js?");

/***/ }),

/***/ "./src/js/logic/setAsymmetricalClasses.js":
/*!************************************************!*\
  !*** ./src/js/logic/setAsymmetricalClasses.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setAsymmetricalClasses: () => (/* binding */ setAsymmetricalClasses)\n/* harmony export */ });\nconst setAsymmetricalClasses = () => {\n  const skinNutritionImages = document.querySelectorAll(\n    \".asymmetrical-carousel__column\"\n  );\n\n  skinNutritionImages.forEach((img, i) => {\n    const classNumber = (i % 4) + 1;\n    img.classList.add(`asymmetrical-carousel__column--${classNumber}`);\n  });\n};\n\n\n\n\n//# sourceURL=webpack://terranova/./src/js/logic/setAsymmetricalClasses.js?");

/***/ }),

/***/ "./src/js/pages/posts.js":
/*!*******************************!*\
  !*** ./src/js/pages/posts.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _animations_clipUp_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../animations/clipUp.js */ \"./src/js/animations/clipUp.js\");\n/* harmony import */ var _logic_setAsymmetricalClasses_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logic/setAsymmetricalClasses.js */ \"./src/js/logic/setAsymmetricalClasses.js\");\n/* harmony import */ var _logic_draggableCarousel_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logic/draggableCarousel.js */ \"./src/js/logic/draggableCarousel.js\");\n/* harmony import */ var _services_loadMorePosts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/loadMorePosts.js */ \"./src/js/services/loadMorePosts.js\");\n\r\n\r\n\r\n\r\n\r\nclass Posts {\r\n  constructor() {\r\n    this.carousels = [];\r\n    this.eventListeners = [];\r\n    this.loaderDoneListener = null;\r\n  }\r\n\r\n  init() {\r\n    console.log(\"Posts\");\r\n\r\n    // Hero Entrance\r\n    (0,_animations_clipUp_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])([\".banner__text-background, h1, .banner__subheading\"]);\r\n\r\n    (0,_logic_setAsymmetricalClasses_js__WEBPACK_IMPORTED_MODULE_1__.setAsymmetricalClasses)();\r\n\r\n    // Archive Carousel\r\n    const blogCarouselContainer = document.querySelector(\".slides-container\");\r\n    const blogCarouselTrack = document.querySelector(\r\n      \".asymmetrical-carousel__container\"\r\n    );\r\n    const carousel1 = (0,_logic_draggableCarousel_js__WEBPACK_IMPORTED_MODULE_2__.draggableCarousel)(\r\n      blogCarouselContainer,\r\n      blogCarouselTrack,\r\n      \".asymmetrical-carousel__column\"\r\n    );\r\n    this.carousels.push(carousel1);\r\n\r\n    // Recipes\r\n    const recipesContainer = document.querySelector(\r\n      \".recipes__archive-container\"\r\n    );\r\n    const recipesCarouselTrack = document.querySelector(\".recipes__archive\");\r\n    const carousel2 = (0,_logic_draggableCarousel_js__WEBPACK_IMPORTED_MODULE_2__.draggableCarousel)(\r\n      recipesContainer,\r\n      recipesCarouselTrack,\r\n      \".recipes__post\"\r\n    );\r\n    this.carousels.push(carousel2);\r\n\r\n    /*\r\n    // Load More\r\n    const buttonLoadMore = document.querySelector(\".button--load-more\");\r\n    const loadMoreHandler = () =>\r\n      loadMorePosts({\r\n        html: {\r\n          buttonSelector: \".button--load-more\",\r\n        },\r\n        wordpress: {\r\n          postsNumber: 3,\r\n        },\r\n      });\r\n\r\n    buttonLoadMore.addEventListener(\"click\", loadMoreHandler);\r\n    this.eventListeners.push({\r\n      element: buttonLoadMore,\r\n      event: \"click\",\r\n      handler: loadMoreHandler,\r\n    });\r\n    */\r\n  }\r\n\r\n  destroy() {\r\n    // Remove event listeners\r\n    if (this.loaderDoneListener) {\r\n      document.removeEventListener(\"loaderDone\", this.loaderDoneListener);\r\n      this.loaderDoneListener = null;\r\n    }\r\n\r\n    // Remove all event listeners\r\n    this.eventListeners.forEach(({ element, event, handler }) => {\r\n      element.removeEventListener(event, handler);\r\n    });\r\n    this.eventListeners = [];\r\n\r\n    // Clean up carousels (if they have destroy methods)\r\n    this.carousels.forEach((carousel) => {\r\n      if (carousel && typeof carousel.destroy === \"function\") {\r\n        carousel.destroy();\r\n      }\r\n    });\r\n    this.carousels = [];\r\n  }\r\n}\r\n\r\n// Create instance and set up event listener\r\nconst posts = new Posts();\r\nposts.loaderDoneListener = () => posts.init();\r\ndocument.addEventListener(\"loaderDone\", posts.loaderDoneListener);\r\n\r\n// Make cleanup available globally\r\nwindow.postsCleanup = () => posts.destroy();\r\n\n\n//# sourceURL=webpack://terranova/./src/js/pages/posts.js?");

/***/ }),

/***/ "./src/js/services/loadMorePosts.js":
/*!******************************************!*\
  !*** ./src/js/services/loadMorePosts.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ loadMorePosts)\n/* harmony export */ });\n// Helper function for clearing field elements\r\nfunction clearFieldElements(elements) {\r\n  elements.forEach((element) => element.remove());\r\n}\r\n\r\n// Helper function for updating field elements\r\nfunction updateFieldElement(element, property, value) {\r\n  if (property === \"src\" || property === \"href\") {\r\n    element.setAttribute(property, value);\r\n  } else {\r\n    element[property] = value;\r\n  }\r\n}\r\n\r\n// Main function\r\nasync function loadMorePosts({\r\n  html: {\r\n    containerSelector = \".archive-grid\",\r\n    postSelector = \".archive-grid__post\",\r\n    buttonSelector = \".button--load-more\",\r\n    noMorePostsSelector = \".archive-grid__no-more-posts\",\r\n    loaderClass = \"loader__spinner\",\r\n    titleSelector = \".archive-grid__title\",\r\n    contentSelector = \".archive-grid__content\",\r\n    excerptSelector = \".archive-grid__excerpt\",\r\n    featuredImageSelector = \".archive-grid__featured-img\",\r\n    featuredImageCaptionSelector = \".archive-grid__featured-image-caption\",\r\n    permalinkSelector = \".archive-grid__link\",\r\n    customFieldMappings = [],\r\n    makeWholePostLink = true,\r\n  } = {},\r\n  wordpress: {\r\n    postType = \"post\",\r\n    customTaxonomy = null,\r\n    termSlugs = null,\r\n    searchTerm = null,\r\n    postsNumber = 3,\r\n  } = {},\r\n} = {}) {\r\n  // Get elements\r\n\r\n  const container = document.querySelector(containerSelector);\r\n  const button = document.querySelector(buttonSelector);\r\n  const noMorePostsText = noMorePostsSelector\r\n    ? document.querySelector(noMorePostsSelector)\r\n    : null;\r\n\r\n  // Set initial offset according to visible posts\r\n  const offset = document.querySelectorAll(postSelector).length;\r\n\r\n  if (!container || !button) {\r\n    console.error(\"Container or button selector is incorrect.\");\r\n    return;\r\n  }\r\n\r\n  // Replace the button with a loader\r\n  const loader = document.createElement(\"div\");\r\n  loader.classList.add(...loaderClass.split(\" \"));\r\n  button.replaceWith(loader);\r\n\r\n  try {\r\n    // Prepare form data\r\n    const formData = new FormData();\r\n    formData.append(\"action\", \"load_more_posts\");\r\n    formData.append(\"postType\", postType);\r\n    if (customTaxonomy) formData.append(\"customTaxonomy\", customTaxonomy);\r\n    if (termSlugs) formData.append(\"termSlugs\", termSlugs);\r\n    if (searchTerm) formData.append(\"searchTerm\", searchTerm);\r\n    if (postsNumber) formData.append(\"postsNumber\", postsNumber);\r\n\r\n    formData.append(\"offset\", offset);\r\n\r\n    // console.log(\"Sending data:\", Object.fromEntries(formData.entries()));\r\n\r\n    // Make AJAX request\r\n    const apiEndPoint = wordpressObject.ajaxUrl;\r\n    const response = await fetch(apiEndPoint, {\r\n      method: \"POST\",\r\n      body: formData,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      console.error(\"Network response was not ok:\", response);\r\n      throw new Error(\"Network response was not ok\");\r\n    }\r\n\r\n    const result = await response.json();\r\n\r\n    // console.log(\"Received result:\", result);\r\n\r\n    if (!result || !result.data) {\r\n      throw new Error(\"Invalid response from API\");\r\n    }\r\n\r\n    const postsInfo = result.data.data.postsInfo;\r\n    const totalPosts = result.data.data.totalPosts;\r\n    // console.log(totalPosts);\r\n\r\n    if (postsInfo.length > 0) {\r\n      postsInfo.forEach((post) => {\r\n        // Clone an existing post to use as a template\r\n        const template = document.querySelector(postSelector).cloneNode(true);\r\n\r\n        // Remove existing elements for mapped fields\r\n        const elementInfo = customFieldMappings.flatMap((mapping) => {\r\n          const fieldElements = template.querySelectorAll(mapping.selector);\r\n          if (fieldElements.length > 0) {\r\n            const firstElement = fieldElements[0];\r\n            const classList = [...firstElement.classList];\r\n            const parent = firstElement.parentNode;\r\n            clearFieldElements(Array.from(fieldElements));\r\n            return [{ mapping, classList, parent }];\r\n          }\r\n          return [];\r\n        });\r\n\r\n        // Update the cloned template with new data\r\n        const titleElement = template.querySelector(titleSelector);\r\n        const contentElement = template.querySelector(contentSelector);\r\n        const excerptElement = template.querySelector(excerptSelector);\r\n        const featuredImageElement = template.querySelector(\r\n          featuredImageSelector\r\n        );\r\n        const featuredImageCaptionElement = template.querySelector(\r\n          featuredImageCaptionSelector\r\n        );\r\n\r\n        // Paint UI\r\n        // Title\r\n        if (titleElement) titleElement.innerHTML = post.title;\r\n        // Content\r\n        if (contentElement) contentElement.innerHTML = post.content;\r\n        // Excerpt\r\n        if (excerptElement) excerptElement.innerHTML = post.excerpt;\r\n        // Image\r\n        if (featuredImageElement) {\r\n          featuredImageElement.src = post.featured_image ?? \"\";\r\n          featuredImageElement.alt = post.title ?? \"\";\r\n        } else {\r\n          const featuredImageContainer = template.querySelector(\r\n            featuredImageSelector.split(\" \")[0]\r\n          );\r\n          if (featuredImageContainer) {\r\n            featuredImageContainer.innerHTML = `<img src=\"${\r\n              post.featured_image ?? \"\"\r\n            }\" alt=\"${post.title ?? \"\"}\">`;\r\n          }\r\n        }\r\n        // Image Caption\r\n        if (featuredImageCaptionElement)\r\n          featuredImageCaptionElement.innerHTML = post.featured_image_caption;\r\n\r\n        // ACF\r\n        elementInfo.forEach(({ mapping, classList, parent }) => {\r\n          let value = post.custom_fields[mapping.fieldName];\r\n\r\n          // Handle repeater subfields\r\n          if (mapping.isRepeater) {\r\n            const repeaterValues = [];\r\n            for (let i = 0; i < value.length; i++) {\r\n              const nestedField = `${mapping.fieldName}_${i}_${mapping.subFieldName}`;\r\n              if (post.custom_fields[nestedField]) {\r\n                repeaterValues.push(post.custom_fields[nestedField]);\r\n              }\r\n            }\r\n            value = repeaterValues; // Store as array to iterate over\r\n          }\r\n\r\n          // console.log(value.length);\r\n\r\n          // Update field element\r\n          if (Array.isArray(value)) {\r\n            value.forEach((subValue) => {\r\n              const newElement = document.createElement(mapping.tag);\r\n              newElement.classList.add(...classList);\r\n              updateFieldElement(newElement, mapping.property, subValue);\r\n              parent.appendChild(newElement);\r\n            });\r\n          } else {\r\n            const newElement = document.createElement(mapping.tag);\r\n            newElement.classList.add(...classList);\r\n            updateFieldElement(newElement, mapping.property, value);\r\n            parent.appendChild(newElement);\r\n          }\r\n        });\r\n\r\n        if (makeWholePostLink) {\r\n          const linkElement = template.querySelector(permalinkSelector);\r\n          if (linkElement) {\r\n            linkElement.href = post.permalink;\r\n          } else {\r\n            template.href = post.permalink;\r\n          }\r\n        }\r\n\r\n        // Append the updated template to the container\r\n        container.appendChild(template);\r\n      });\r\n\r\n      loader.replaceWith(button);\r\n    } else {\r\n      if (noMorePostsText) {\r\n        noMorePostsText.style.display = \"block\";\r\n      }\r\n      loader.replaceWith(button);\r\n      button.style.display = \"none\";\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching posts:\", error);\r\n    loader.replaceWith(button);\r\n    if (noMorePostsText) {\r\n      noMorePostsText.style.display = \"block\";\r\n    }\r\n    button.style.display = \"none\";\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://terranova/./src/js/services/loadMorePosts.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/pages/posts.js");
/******/ 	
/******/ })()
;